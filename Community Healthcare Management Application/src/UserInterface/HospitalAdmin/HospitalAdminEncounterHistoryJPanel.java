/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.HospitalAdmin;

import UserInterface.SystemAdmin.*;
import Business.Community.Community;
import Business.Doctor.Doctor;
import Business.Ecosystem;
import Business.Hospital.Hospital;
import Business.Patient.Patient;
import Business.Patient.PatientDetails;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author moins
 */
public class HospitalAdminEncounterHistoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminEncounterHistoryJPanel
     */

    JPanel WorkArea;
    Ecosystem business;
    UserAccount account;
    ArrayList<Community> communities;
    ArrayList<Patient> patients;
    public HospitalAdminEncounterHistoryJPanel(JPanel WorkArea, Ecosystem business, UserAccount account) {
        initComponents();
        this.account= account;
        this.business=business;
        this.WorkArea=WorkArea;
        
        communities = new ArrayList<>();
        for (UserAccount account1 : business.getUserAccountDirectory().getUserAccountList()){
            
            if(account1.getRole().toString().contains("CommunityAdminRole")){
              communities.add((Community)account1.getDetails());
            }
        }
        patients = new ArrayList<>();
        for (UserAccount account1 : business.getUserAccountDirectory().getUserAccountList()){
            
            if(account1.getRole().toString().contains("PatientRole")){
              patients.add((Patient)account1.getDetails());
            }
        }
        
        populatetable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Community", "Hospital", "Doctor", "Patient", "Date", "Notes"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ENCOUNTER DETAILS");

        backBtn.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        backBtn.setText("<");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn)
                        .addGap(29, 29, 29)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        WorkArea.remove(this);
        CardLayout layout = (CardLayout) WorkArea.getLayout();
        layout.previous(WorkArea);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void populatetable() {
        ArrayList<Hospital> hospitalList = new ArrayList<>();
        for(Community c  : communities){
            if(c.getHospitalDirectory().size()>0)
                for(Hospital h : c.getHospitalDirectory()){
                    hospitalList.add( h);
                }
            
       }
       ArrayList<Doctor> doctorList = new ArrayList<>();
       for(Hospital h : hospitalList){
            if(h.getDoctorDirectory().size()>0){
                for(Doctor d: h.getDoctorDirectory()){
                    doctorList.add(d);
                }
            }
        }
       
       ArrayList<PatientDetails> patientList = new ArrayList<>();
       for (Patient p : patients){
           patientList=p.getPatientDetails();
       }
       
       int rowCount = jTable1.getRowCount();
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        for(Patient p : patients){
        for(PatientDetails r: patientList) {
            
            Object row[] = new Object[8];
            row[0] = (r.getDoctor() != null) ? r.getDoctor().getHospital().getCommunity().getName():"Hospital Dummy";
            row[1] = (r.getDoctor() != null) ? r.getDoctor().getHospital().getName():"Hospital Dummy";
            row[2] = (r.getDoctor() != null) ? r.getDoctor().getName() : "Doctor Dummy";
            row[3] = p.getName();
            row[4] = r;
            row[5] = r.getNotes();
            
            model.addRow(row);
        
        }
        }
        
    }
}
